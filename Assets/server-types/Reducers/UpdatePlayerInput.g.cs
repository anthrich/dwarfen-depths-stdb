// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void UpdatePlayerInputHandler(ReducerEventContext ctx, DbVector2 direction, ulong sequenceId);
        public event UpdatePlayerInputHandler? OnUpdatePlayerInput;

        public void UpdatePlayerInput(DbVector2 direction, ulong sequenceId)
        {
            conn.InternalCallReducer(new Reducer.UpdatePlayerInput(direction, sequenceId), this.SetCallReducerFlags.UpdatePlayerInputFlags);
        }

        public bool InvokeUpdatePlayerInput(ReducerEventContext ctx, Reducer.UpdatePlayerInput args)
        {
            if (OnUpdatePlayerInput == null)
            {
                if (InternalOnUnhandledReducerError != null)
                {
                    switch (ctx.Event.Status)
                    {
                        case Status.Failed(var reason): InternalOnUnhandledReducerError(ctx, new Exception(reason)); break;
                        case Status.OutOfEnergy(var _): InternalOnUnhandledReducerError(ctx, new Exception("out of energy")); break;
                    }
                }
                return false;
            }
            OnUpdatePlayerInput(
                ctx,
                args.Direction,
                args.SequenceId
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class UpdatePlayerInput : Reducer, IReducerArgs
        {
            [DataMember(Name = "direction")]
            public DbVector2 Direction;
            [DataMember(Name = "sequenceId")]
            public ulong SequenceId;

            public UpdatePlayerInput(
                DbVector2 Direction,
                ulong SequenceId
            )
            {
                this.Direction = Direction;
                this.SequenceId = SequenceId;
            }

            public UpdatePlayerInput()
            {
                this.Direction = new();
            }

            string IReducerArgs.ReducerName => "UpdatePlayerInput";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags UpdatePlayerInputFlags;
        public void UpdatePlayerInput(CallReducerFlags flags) => UpdatePlayerInputFlags = flags;
    }
}
